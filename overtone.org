#+TITLE: Emacs/Babel/Overtone quick demo
#+PROPERTY: header-args :results silent
#+PROPERTY: tangle sound.clj

* Config

| Prog/Package  |   Version |
|---------------+-----------|
| GNU Emacs     | 24.3.50.1 |
| CIDER         |       0.5 |
| auto-complete |     1.4.0 |
| dash.el       |     2.3.0 |
| pkg-info      |       0.4 |
| Org-mode      |     8.2.4 |
| Clojure       |     1.5.1 |
| Overtone      |     0.9.1 |

** Load libraries

#+BEGIN_SRC emacs-lisp :tangle no
(setq debug-on-error t)
(add-to-list 'load-path "~/install/git/cider/")
(add-to-list 'load-path "~/install/git/org-mode/lisp/")
(add-to-list 'load-path "~/install/git/clojure-mode/")
(add-to-list 'load-path "~/install/git/ac-nrepl/")
(add-to-list 'load-path "~/install/git/auto-complete")
(let ((default-directory "~/install/git/auto-complete/"))
  (normal-top-level-add-subdirs-to-load-path))

(require 'package)
(package-initialize)

(require 'dash)
(require 'auto-complete)
(require 'cider)
(require 'ac-nrepl)

(setq make-backup-files nil)
#+END_SRC

** Setup Org Babel and Clojure/Cider

#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
(add-hook 'cider-mode-hook 'ac-nrepl-setup)
(eval-after-load "auto-complete"
  '(progn (add-to-list 'ac-modes 'cider-repl-mode)
          (add-to-list 'ac-modes 'cider-mode)))

(eval-after-load "cider"
  '(define-key cider-mode-map (kbd "C-c C-d")
     'ac-nrepl-popup-doc))

(setq nrepl-hide-special-buffers t)
(setq cider-repl-pop-to-buffer-on-connect nil)
(setq cider-popup-stacktraces nil)
(setq cider-repl-popup-stacktraces t)

(add-hook 'clojure-mode-hook 'auto-complete-mode)
#+END_SRC

** Setup Org Babel

#+BEGIN_SRC emacs-lisp :tangle no
(require 'ox-latex)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (clojure . t)))

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "yes")
        (:hlines . "no")
        (:tangle . "no")
        (:padnewline . "yes")))

(setq org-babel-clojure-backend 'cider
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-export-htmlize-output-type 'css
      org-confirm-babel-evaluate nil)

(setq org-latex-listings 'minted)
(add-to-list 'org-latex-packages-alist '("" "minted"))
#+END_SRC

* Local key bindinds

#+BEGIN_SRC emacs-lisp :tangle no
(org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
(org-defkey org-mode-map "\C-c\C-d" 'cider-doc)
#+END_SRC

* Babel

#+BEGIN_SRC emacs-lisp :tangle no
(message "Yeah!")
#+END_SRC

* Babel: vars

#+BEGIN_SRC emacs-lisp :tangle no :var n=2
(message (number-to-string n))
#+END_SRC

# Now M-x cider-jack-in RET

#+BEGIN_SRC clojure :var n=3 m=3
(-> n inc (+ m))
#+END_SRC

* Babel: lists

#+NAME: example-list
- simple
  - not
  - nested
- list

#+BEGIN_SRC emacs-lisp :tangle no :var x=example-list
(print x)
#+END_SRC

#+BEGIN_SRC clojure :var x=example-list
(map clojure.string/upper-case x)
#+END_SRC

* Babel: tables

#+NAME: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

# #+BEGIN_SRC emacs-lisp :tangle no :var data=example-table[1,1]
# #+BEGIN_SRC emacs-lisp :tangle no :var data=example-table[0,0]
# #+BEGIN_SRC emacs-lisp :tangle no :var data=example-table[,0]
# #+BEGIN_SRC emacs-lisp :tangle no :var data=example-table[1:2]
#+BEGIN_SRC emacs-lisp :tangle no :var data=example-table[0,0]
data
#+END_SRC

* Overtone: loading and booting

#+BEGIN_SRC clojure
(use 'overtone.core)
#+END_SRC

#+BEGIN_SRC clojure
(boot-external-server)
#+END_SRC

* Overtone: Playing

#+BEGIN_SRC clojure
(use 'overtone.inst.piano)
#+END_SRC

#+BEGIN_SRC clojure
(piano 40)
#+END_SRC

#+BEGIN_SRC clojure
(doseq [note (chord :C3 :major)] (piano note))
#+END_SRC

#+BEGIN_SRC clojure
(doseq [note (chord :E3 :minor)] (piano note))
#+END_SRC

#+BEGIN_SRC clojure
(doseq [note (chord :A3 :minor)] (piano note))

(defn play-chord [chord]
  (doseq [note chord] (piano note)))

(play-chord (chord :A3 :minor))
#+END_SRC

#+BEGIN_SRC clojure
(let [time (now)]
  (at time (play-chord (chord :C3 :major)))
  (at (+ 1000 time) (play-chord (chord :C3 :major7)))
  (at (+ 2000 time) (play-chord (chord :E3 :minor)))
  (at (+ 3000 time) (play-chord (chord :A2 :minor))))
#+END_SRC

#+BEGIN_SRC clojure
(defsynth bar [freq 440]
  (out 0 (sin-osc freq)))

(bar 500)
(kill bar)
(stop)

(definst beep [note 60]
  (let [sound-src (sin-osc (midicps note))
        env (env-gen (perc 0.01 1.0) :action FREE)] ; sam uses :free
    (* sound-src env)))

(beep 60)

(defsynth pad1 [freq 110 amp 1 gate 1 out-bus 0]
  (out out-bus
       (* (saw [freq (* freq 1.01)])
          (env-gen (adsr 0.01 0.1 0.7 0.5) :gate gate :action FREE))))

(pad1)
(stop)

(for [i (range 200)] (at (+ (now) (* i 20)) (beep i)))
#+END_SRC

#+BEGIN_SRC clojure
(map piano [60 63 67])
(map piano (map note [:C3 :E4 :G4]))
(map piano (map note [:C#5 :E4 :G4]))
(map piano (map note [:Cb2 :E4 :G4]))

(definst steel-drum [note 60 amp 0.8]
  (let [freq (midicps note)]
    (* amp
       (env-gen (perc 0.01 0.2) 1 1 0 1 :action FREE)
       (+ (sin-osc (/ freq 2))
          (rlpf (saw freq) (* 1.1 freq) 0.4)))))

(steel-drum (note :E3))
(map steel-drum (map note [:E3 :D#4]))
#+END_SRC

* Overtone: samples

#+BEGIN_SRC clojure
(def acc (sample "/home/guerry/Downloads/120931__juskiddink__accordion-pad1.wav"))
(def noa (sample "/home/guerry/Downloads/126724__brunovianna__noaa-19-2011-08-05-14-31-39.wav"))

(let []
  (noa)
  (Thread/sleep 3000)
  (acc)
  (Thread/sleep 2000)
  (piano (note :Cb3))
  (piano 68))

(stop)
#+END_SRC

* Overtone: using freesound.org

#+BEGIN_SRC clojure
(def snare (sample (freesound-path 26903)))
(snare)
(def clic (sample (freesound-path 406)))
(clic)
(def steam (sample (freesound-path 30628)))
(steam)
(def clap (sample (freesound-path 48310)))
(clap)
(def clap2 (sample (freesound-path 132676)))
(clap2)
(def boom (sample (freesound-path 80401)))
(boom)
#+END_SRC

* Liens

- https://github.com/overtone/overtone
- https://github.com/overtone/overtone/blob/master/src/overtone/samples/freesound.clj
- http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html
- http://skillsmatter.com/podcast/home/functional-composition
- http://www.tonalsoft.com/pub/news/pitch-bend.aspx
- http://www.freesound.org/
